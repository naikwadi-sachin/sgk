package org.sgk.service;import java.util.ArrayList;import java.util.Arrays;import java.util.Calendar;import java.util.GregorianCalendar;import java.util.List;import org.sgk.controller.ReservationNotAvailableException;import org.sgk.domain.PeriodicReservation;import org.sgk.domain.Player;import org.sgk.domain.Reservation;import org.sgk.domain.SportType;public class ReservationServiceImpl implements ReservationService {	private static final SportType TENNIS = new SportType(1, "Tennis");	private static final SportType SOCCER = new SportType(2, "Soccer");	private List<Reservation> reservations;	public ReservationServiceImpl() {		reservations = new ArrayList<Reservation>();		reservations.add(new Reservation("Tennis #1", new GregorianCalendar(				2014, 8, 30).getTime(), 9, new Player("Rohit", "N/A"), TENNIS));		reservations				.add(new Reservation("Tennis #2", new GregorianCalendar(2014,						8, 30).getTime(), 11, new Player("Vishal", "NA"),						TENNIS));	}	@Override	public List<Reservation> query(String courtName) {		List<Reservation> result = new ArrayList<Reservation>();		for (Reservation reservation : reservations) {			if (reservation.getCourtName().equals(courtName))				result.add(reservation);		}		return result;	}	@Override	public void make(Reservation reservation)			throws ReservationNotAvailableException {		for (Reservation made : reservations) {			if (made.getCourtName().equals(reservation.getCourtName())					&& made.getDate().equals(reservation.getDate())					&& made.getHour() == reservation.getHour())				throw new ReservationNotAvailableException(						reservation.getCourtName(), reservation.getDate(),						reservation.getHour());		}		reservations.add(reservation);	}	@Override	public List<SportType> getAllSportTypes() {		return Arrays.asList(new SportType[] { TENNIS, SOCCER });	}	@Override	public SportType getSportType(int sportTypeId) {		switch(sportTypeId)		{		case 1 : 			return TENNIS;		case 2 :			return SOCCER;		default:			return null;		}	}	@Override	public void makePeriodic(PeriodicReservation periodicReservation)			throws ReservationNotAvailableException {		Calendar fromCalender = Calendar.getInstance();		fromCalender.setTime(periodicReservation.getFromDate());		Calendar toCalender = Calendar.getInstance();		toCalender.setTime(periodicReservation.getToDate());				while(fromCalender.before(toCalender))		{			Reservation reservation = new Reservation();			reservation.setCourtName(periodicReservation.getCourtName());			reservation.setDate(periodicReservation.getFromDate());			reservation.setHour(periodicReservation.getHour());			reservation.setPlayer(periodicReservation.getPlayer());			make(reservation);						fromCalender.add(Calendar.DATE, periodicReservation.getPeriod());		}	}}